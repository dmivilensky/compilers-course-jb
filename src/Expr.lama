-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
     Var (s) -> st (s)
  |  Const (i) -> i
  |  Binop (op, e1, e2) -> (
    var l = evalExpr (st, e1);
    var r = evalExpr (st, e2);
    case op of
       "+" -> (l + r)
    |  "-" -> (l - r)
    |  "*" -> (l * r)
    |  "/" -> (l / r)
    |  "%" -> (l % r)
    |  "<" -> (l < r)
    |  "<=" -> (l <= r)
    |  "==" -> (l == r)
    |  "!=" -> (l != r)
    |  "!=" -> (l != r)
    |  ">=" -> (l >= r)
    |  ">" -> (l > r)
    esac
  )
  esac
}
