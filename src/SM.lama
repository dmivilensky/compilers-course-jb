-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}
          
fun eval_one([stack, st, w], i) {
  case i of WRITE -> (case stack of v:vs -> [vs, st, writeWorld(v, w)] esac)
  | READ -> (case readWorld(w) of [v, w_prime] -> [v:stack, st, w_prime] esac)
  | BINOP (s) -> (case stack of b:a:vs -> (
    var v = (case s of
         "+" -> (a + b)
    |  "-" -> (a - b)
    |  "*" -> (a * b)
    |  "/" -> (a / b)
    |  "%" -> (a % b)
    |  "<" -> (a < b)
    |  "<=" -> (a <= b)
    |  "==" -> (a == b)
    |  "!=" -> (a != b)
    |  "!=" -> (a != b)
    |  ">=" -> (a >= b)
    |  ">" -> (a > b)
    |  "!!" -> (a !! b)
    |  "&&" -> (a && b)
    esac);
    [v:vs, st, w]
   ) esac)
  | LD (x) -> [st(x):stack, st, w]
  | ST (x) -> (case stack of v:vs -> [vs, st <- [x, v], w] esac)
  | CONST (v) -> [v:stack, st, w] esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of {} -> c | i:is -> eval (eval_one(c, i), is) esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (s) -> {LD (s)} |
    Const (v) -> {CONST (v)} |
    Binop (op, e1, e2) -> flatten({compileExpr (e1), compileExpr (e2), {BINOP (op)}})
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> flatten ({compileExpr (expr), {ST (x)}}) |
    Seq (stmt1, stmt2) -> flatten ({compileSM (stmt1), compileSM (stmt2)}) |
    Skip -> {} |
    Read (x) -> flatten ({{READ}, {ST (x)}}) |
    Write (expr) -> flatten ({compileExpr (expr), {WRITE}})
  esac
}
